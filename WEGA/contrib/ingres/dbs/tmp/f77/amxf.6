.sh ARGUMENTKONVERSIONEN
In \*(FF werden Parameter grunds::atzlich
durch Adre::sverweise
(Call By Reference) ::ubergeben,
einige Parameter
(Funktionen, Parameter vom Typ character*n)
erzeugen einen zus::atzlichen L::angenparameter
vom Typ integer*4 bsw. long.
.s1
.lp +30 30
subroutine f(..., x, ...)	f_(..., x, ...)
.lp +30 30
integer*2 x	short *x;
.s1
.lp +30 30
subroutine f(..., x, ...)	f_(..., x, ...)
.lp +30 30
integer x	long *x;
.br
oder
.br
short *x;
.br
(siehe `f77'\*-Flag `\*-i2')
.s1
.lp +30 30
subroutine f(..., x, ...)	f_(..., x, ...)
.lp +30 30
integer*4 x	long *x;
.s1
.lp +30 30
subroutine f(..., x, ...)	f_(..., x, ...)
.lp +30 30
logical x	long *x;
.br
oder
.br
short *x;
.br
(siehe `f77'\*-Flag `\*-i2')
.s1
.lp +30 30
subroutine f(..., x, ...)	f_(..., x, ...)
.lp +30 30
real x	float *x;
.s1
.lp +30 30
subroutine f(..., x, ...)	f_(..., x, ...)
.lp +30 30
double precision x	double *x;
.s1
.lp +30 30
subroutine f(..., x, ...)	f_(..., x, ...)
.lp +30 30
complex x	struct {float r, i; } *x;
.s1
.lp +30 30
subroutine f(..., x, ...)	f_(..., x, ...)
.lp +30 30
double complex x	struct {double r, i; } *x;
.s1
.lp +30 30
subroutine f(..., x, ...)	f_(..., x, ..., xlen)
.lp +30 30
character*(*) x	char x[];
.br
long xlen;
.s1
.lp +30 30
subroutine f(..., x, ...)	f_(..., x, ..., xnull)
.lp +30 30
subroutine x	int (*x)();
.br
long xnull; /* == 0L */
.s1
.i0
.s1
