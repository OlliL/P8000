# include	"../conf/conf.h"

# ifdef MSDOS

.C.OBJ:
	$(CC) $*.c
	flag  $(LIBA) rwn
	lib   $(LIBA)-+$*;
	flag  $(LIBA) sro

INDES=	i:\ind\source
DLIB=	$(INDES)\..\lib
DIUTIL= $(INDES)\iutil
DGUTIL= $(INDES)\gutil
H=	..\h
TR= /Zi /Od
LIBA=	$(DLIB)\lliba.lib
INDLIB= $(DLIB)\lindes2.lib
MODEL=	L

CC=	cl /c /Gt20 /Ot /Gt20 $(TR) /FmNUL /I$(H) /Alfu

INC=	msdos.inc	cmacros.inc	brkctl.inc

HDR=	..\conf\conf.h	$(H)\ingres.h	$(H)\access.h	$(H)\symbol.h	\
	$(H)\catalog.h	$(H)\lock.h	AA_liba.h


SRC=	AAclrtup.c	AAcloser.c	AAerror.c	AAexit.c
SRCA=	AAf4_f8.c	AAf4_i1.c	AAf4_i2.c	AAf4_i4.c
SRC1=	AAf8_f4.c	AAf8_i1.c	AAf8_i2.c	AAf8_i4.c
SRCB=	AAi1_f4.c	AAi1_f8.c	AAi1_i2.c	AAi1_i4.c
SRC2=	AAi2_f4.c	AAi2_f8.c	AAi2_i1.c	AAi2_i4.c
SRCC=	AAi4_f4.c	AAi4_f8.c	AAi4_i1.c	AAi4_i2.c
SRC3=	AAmain.c	AAmove.c	AAopenr.c	AAsectup.c
SRCD=	AAfind.c	AAsignal.c	AAsetkey.c	AAget.c
SRC4=	AAapp.c 	AAdel.c 	AArep.c 	AAreq.c
SRCE=	AAlock.c

OBJS=	AAmove.obj	AAclrtup.obj					\
	AAi1_i2.obj	AAi1_i4.obj	AAi1_f4.obj	AAi1_f8.obj
OBJ1=	AAi2_i1.obj	AAi2_i4.obj	AAi2_f4.obj	AAi2_f8.obj
OBJA=	AAi4_i1.obj	AAi4_i2.obj	AAi4_f4.obj	AAi4_f8.obj
OBJ2=	AAf4_i1.obj	AAf4_i2.obj	AAf4_i4.obj	AAf4_f8.obj
OBJB=	AAf8_i1.obj	AAf8_i2.obj	AAf8_i4.obj	AAf8_f4.obj
OBJ3=	AAmain.obj	AAexit.obj	AAopenr.obj	AAcloser.obj
OBJC=	AAfind.obj	AAreq.obj	AAget.obj	AAapp.obj
OBJ4=	AAdel.obj	AArep.obj	AAsectup.obj	AAsetkey.obj
OBJD=	AAlock.obj	AAsignal.obj	AAerror.obj

ACCESS= closer.obj	openr.obj	accbuf.obj	acc_addbuf.obj	\
	getequal.obj	get.obj 	insert.obj	replace.obj	\
	delete.obj	setkey.obj	find.obj	rhash.obj	\
	ndxsearch.obj	findbest.obj	scan_dups.obj	get_tuple.obj	\
	put_tuple.obj	del_tuple.obj	tup_len.obj	newlino.obj	\
	add_ovflo.obj	last_page.obj	page.obj	compare.obj	\
	utility.obj	readadmin.obj

IUTIL=	printup.obj	out_arg.obj	dblocks.obj	errfilen.obj	\
	ing_dbname.obj	printdesc.obj	paramd.obj	cslocks.obj	\
	rllocks.obj	pglocks.obj	globals.obj	version.obj

GUTIL=	v6_atof.obj	bequal.obj	concat.obj	iocv.obj	\
	v6_itoa.obj	length.obj	scompare.obj	ftoa.obj	\
	ztack.obj	syserr.obj	trace.obj	v6_atoi.obj	\
	smove.obj	xputchar.obj	bmove.obj	locv.obj	\
	tTf.obj 	gen.obj


$(LIBA):	$(HDR) $(INDLIB)
	$(CC)	$(SRC)
	$(CC)	$(SRCA)
	$(CC)	$(SRC1)
	$(CC)	$(SRCB)
	$(CC)	$(SRC2)
	$(CC)	$(SRCC)
	$(CC)	$(SRC3)
	$(CC)	$(SRCD)
	$(CC)	$(SRC4)
	$(CC)	$(SRCE)
	flag	$(LIBA) rwn
	del	$(LIBA)
	lib	$(LIBA)+$(OBJS);
	lib	$(LIBA)+$(OBJ1);
	lib	$(LIBA)+$(OBJA);
	lib	$(LIBA)+$(OBJ2);
	lib	$(LIBA)+$(OBJB);
	lib	$(LIBA)+$(OBJ3);
	lib	$(LIBA)+$(OBJC);
	lib	$(LIBA)+$(OBJ4);
	lib	$(LIBA)+$(OBJD);
	flag	$(LIBA) srw

$(LIBA):	$(INC)
	copy	$(MODEL)version.inc version.inc
	masm	/Mx crt0dat;
	flag	$(LIBA) rwn
	lib	$(LIBA)-+crt0dat;
	flag	$(LIBA) srw

AAmove.obj:	AAmove.c

AAclrtup.obj:	AAclrtup.c

AAi1_i2.obj:	AAi1_i2.c

AAi1_i4.obj:	AAi1_i4.c

AAi1_f4.obj:	AAi1_f4.c

AAi1_f8.obj:	AAi1_f8.c

AAi2_i1.obj:	AAi2_i1.c

AAi2_i4.obj:	AAi2_i4.c

AAi2_f4.obj:	AAi2_f4.c

AAi2_f8.obj:	AAi2_f8.c

AAi4_i1.obj:	AAi4_i1.c

AAi4_i2.obj:	AAi4_i2.c

AAi4_f4.obj:	AAi4_f4.c

AAi4_f8.obj:	AAi4_f8.c

AAf4_i1.obj:	AAf4_i1.c

AAf4_i2.obj:	AAf4_i2.c

AAf4_i4.obj:	AAf4_i4.c

AAf4_f8.obj:	AAf4_f8.c

AAf8_i1.obj:	AAf8_i1.c

AAf8_i2.obj:	AAf8_i2.c

AAf8_i4.obj:	AAf8_i4.c

AAf8_f4.obj:	AAf8_f4.c

AAmain.obj:	AAmain.c

AAopenr.obj:	AAopenr.c

AAcloser.obj:	AAcloser.c

AAfind.obj:	AAfind.c

AAreq.obj:	AAreq.c

AAget.obj:	AAget.c

AAapp.obj:	AAapp.c

AAdel.obj:	AAdel.c

AArep.obj:	AArep.c

AAsectup.obj:	AAsectup.c

AAsetkey.obj:	AAsetkey.c

AAlock.obj:	AAlock.c

AAsignal.obj:	AAsignal.c

AAerror.obj:	AAerror.c

AAexit.obj:	AAexit.c

crt0dat.obj:	crt0dat.asm $(INC)
	copy	$(MODEL)version.inc version.inc
	masm	/Mx $*;
	flag	$(LIBA) rwn
	lib	$(LIBA)-+$*;
	flag	$(LIBA) ros

$(LIBA):	$(OBJS) $(OBJ1) $(OBJ2) $(OBJ3) $(OBJ4) 		\
			$(OBJA) $(OBJB) $(OBJC) $(OBJD)
	flag	$(LIBA) rwn
	lib	$(LIBA)-+$(OBJS);
	lib	$(LIBA)-+$(OBJ1);
	lib	$(LIBA)-+$(OBJA);
	lib	$(LIBA)-+$(OBJ2);
	lib	$(LIBA)-+$(OBJB);
	lib	$(LIBA)-+$(OBJ3);
	lib	$(LIBA)-+$(OBJC);
	lib	$(LIBA)-+$(OBJ4);
	lib	$(LIBA)-+$(OBJD);
	flag	$(LIBA) sro

# else

SHELL=	/bin/sh
DBS=	../..
LIB=	../lib
SYSLIB=	$(DBS)/lib
BIN=	$(DBS)/bin
LIBA=	$(SYSLIB)/libamx.a
ACCESS=	$(LIB)/a.a
$(ACCESS):

IUTIL=	$(LIB)/i.a
$(IUTIL):

GUTIL=	$(LIB)/g.a
$(GUTIL):

L_I_B_A=.liba
A_C_C_E_S_S=.access
I_U_T_I_L=.iutil
G_U_T_I_L=.gutil

CC=	cc
i_FLAG=
O_FLAG=	-O
# ifndef FP_PROCESSOR
f_FLAG=	-f
# else
f_FLAG=
# endif

# ifdef A7150
# endif

# ifdef BC
# endif

# ifdef EC1834
# endif

# ifdef ESER_PSU
# ifdef TRACE
i_FLAG=	-d
# endif
# endif

# ifdef ESER_VMX
# endif

# ifdef HP_UX
# endif

# ifdef P8000
# endif

# ifdef PDP
# endif

# ifdef PDP70
# endif

# ifdef VAX
# endif

# ifdef VENIX
# endif

# ifdef XENIX286
i_FLAG=	-i -M2s
# endif

# ifdef XENIX386
# endif

CFLAGS=	$(O_FLAG) $(f_FLAG) $(i_FLAG)

AR=	-ar
# ifdef TEST
AR_R	=rv
AR_X	=xv
# else
AR_R	=r
AR_X	=x
# endif
LIBMODE=0644

CHMOD=	chmod
MODE=	0644
MAKE=	make
MFLAGS=	-k install
# ifdef RANLIB
MKLIB=	ranlib
# else
MKLIB=	@echo ranlib
# endif
RM=	-rm -f
TOUCH=	touch

# ifdef NO_F4
OBJS=	AAmove.o	AAclrtup.o					\
	AAi1_i2.o	AAi1_i4.o	AAi1_f8.o	AAi2_i1.o	\
	AAi2_i4.o	AAi2_f8.o	AAi4_i1.o	AAi4_i2.o	\
	AAi4_f8.o	AAf8_i1.o	AAf8_i2.o	AAf8_i4.o	\
	AAmain.o	AAopenr.o	AAcloser.o	AAperm.o	\
	AAfind.o	AAreq.o		AAget.o		AAapp.o		\
	AAdel.o		AArep.o		AAsectup.o	AAsetkey.o	\
	AAlock.o	AAsignal.o	AAerror.o	AAexit.o
# else
OBJS=	AAmove.o	AAclrtup.o					\
	AAi1_i2.o	AAi1_i4.o	AAi1_f8.o	AAi2_i1.o	\
	AAi2_i4.o	AAi2_f8.o	AAi4_i1.o	AAi4_i2.o	\
	AAi4_f8.o	AAf8_i1.o	AAf8_i2.o	AAf8_i4.o	\
	AAi1_f4.o	AAi2_f4.o	AAi4_f4.o	AAf4_i1.o	\
	AAf4_i2.o	AAf4_i4.o	AAf4_f8.o	AAf8_f4.o	\
	AAmain.o	AAopenr.o	AAcloser.o	AAperm.o	\
	AAfind.o	AAreq.o		AAget.o		AAapp.o		\
	AAdel.o		AArep.o		AAsectup.o	AAsetkey.o	\
	AAlock.o	AAsignal.o	AAerror.o	AAexit.o
# endif

A_OBJ=	closer.o	openr.o		accbuf.o	acc_addbuf.o	\
	getequal.o	get.o		insert.o	replace.o	\
	delete.o	setkey.o	find.o		rhash.o		\
	ndxsearch.o	findbest.o	scan_dups.o	get_tuple.o	\
	put_tuple.o	del_tuple.o	tup_len.o	newlino.o	\
	add_ovflo.o	last_page.o	page.o		compare.o	\
	utility.o	readadmin.o

I_OBJ=	printup.o	out_arg.o	dbsname.o	printdesc.o	\
	paramd.o	lock.o		globals.o

# ifdef SIGN_EXT
G_OBJ=	atof.o		bequal.o	customer.o	itoa.o		\
	length.o	scompare.o	ftoa.o		errfilen.o	\
	iocv.o		version.o	ztack.o		syserr.o	\
	trace.o		atoi.o		smove.o		xputchar.o	\
	bmove.o		locv.o		tTf.o		concat.o	\
	gen.o
# else
G_OBJ=	atof.o		bequal.o	customer.o	itoa.o		\
	length.o	scompare.o	ftoa.o		errfilen.o	\
	iocv.o		version.o	ztack.o		syserr.o	\
	trace.o		atoi.o		smove.o		xputchar.o	\
	bmove.o		locv.o		tTf.o		concat.o	\
	i1toi2.o	gen.o
# endif

INSTALL:	install

install:	$(LIBA)

$(LIBA):	$(L_I_B_A) $(A_C_C_E_S_S) $(I_U_T_I_L) $(G_U_T_I_L)
	@-$(CHMOD) $(LIBMODE) $@
	$(MKLIB) $@

$(L_I_B_A):	$(OBJS)
	@-$(TOUCH) $@
	@-$(CHMOD) $(LIBMODE) $@
	$(AR) $(AR_R) $(LIBA) $?

$(A_C_C_E_S_S):	$(ACCESS)
	@-$(TOUCH) $@
	@-$(CHMOD) $(LIBMODE) $@
	$(AR) $(AR_X) $(ACCESS) $(A_OBJ)
	$(AR) $(AR_R) $(LIBA) $(A_OBJ)
	@-$(RM) $(A_OBJ)

$(I_U_T_I_L):	$(IUTIL)
	@-$(TOUCH) $@
	@-$(CHMOD) $(LIBMODE) $@
	$(AR) $(AR_X) $(IUTIL) $(I_OBJ)
	$(AR) $(AR_R) $(LIBA) $(I_OBJ)
	@-$(RM) $(I_OBJ)

$(G_U_T_I_L):	$(GUTIL)
	@-$(TOUCH) $@
	@-$(CHMOD) $(LIBMODE) $@
	$(AR) $(AR_X) $(GUTIL) $(G_OBJ)
	$(AR) $(AR_R) $(LIBA) $(G_OBJ)
	@-$(RM) $(G_OBJ)

UNLOAD:		unload

unload:
	@-$(AR) $(AR_X) $(LIBA) $(OBJS)
	@$(RM) __.SYMDEF
	@$(TOUCH) $(L_I_B_A) $(A_C_C_E_S_S) $(I_U_T_I_L) $(G_U_T_I_L)
	@-$(TOUCH) $(LIBA)

ALLCLEAN:	allclean

allclean:	clean
	$(RM) $(LIBA)

CLEAN:		clean

clean:
	$(RM) $(OBJS) $(L_I_B_A) $(A_C_C_E_S_S) $(I_U_T_I_L) $(G_U_T_I_L)

AAapp.o:	../h/trace.h

AAcloser.o:	../h/trace.h

AAclrtup.o:	../h/trace.h

AAdel.o:	../h/trace.h

AAexit.o:	../h/trace.h

AAfind.o:	../h/trace.h

AAget.o:	../h/trace.h

AAlock.o:	../h/trace.h

AAmain.o:	../h/trace.h

AAopenr.o:	../h/trace.h

AArep.o:	../h/trace.h

AAreq.o:	../h/trace.h

AAsectup.o:	../h/trace.h

AAsetkey.o:	../h/trace.h

AAsignal.o:	../h/trace.h

# ifdef WENZLAFF
HOME=	/z/dbs/src/amx_lib
SRC=	AA_liba.h	AAapp.c		AAcloser.c	AAclrtup.c	\
	AAdel.c		AAerror.c	AAexit.c	AAf4_f8.c	\
	AAf4_i1.c	AAf4_i2.c	AAf4_i4.c	AAf8_f4.c	\
	AAf8_i1.c	AAf8_i2.c	AAf8_i4.c	AAfind.c	\
	AAget.c		AAi1_f4.c	AAi1_f8.c	AAi1_i2.c	\
	AAi1_i4.c	AAi2_f4.c	AAi2_f8.c	AAi2_i1.c	\
	AAi2_i4.c	AAi4_f4.c	AAi4_f8.c	AAi4_i1.c	\
	AAi4_i2.c	AAlock.c	AAmain.c	AAmove.c	\
	AAopenr.c	AAperm.c	AArep.c		AAreq.c		\
	AAsectup.c	AAsetkey.c	AAsignal.c			\
	Makefile	Tracefile	brkctl.inc	cmacros.inc	\
	crt0dat.asm	cversion.inc	lversion.inc	msdos.inc	\
	mversion.inc	sversion.inc	version.inc

.save:		$(SRC)
	mount DISK /wrk
	CP $? $@ /wrk/amx_lib
	> $@
	umount DISK

$(HOME)/.save:	$(SRC)
	CP $? $(HOME)
	> $@

.PRECIOUS:	.save
.PRECIOUS:	$(HOME)/.save
# endif
# endif
