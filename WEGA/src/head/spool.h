/* spool.h */

/* include file for spooler routines ... especially backends */

/***************************************************************
**
** Instructions for writing backends for the wega printer spooler
**
**
** The purpose of a backend is to do the actual printing for the
** spooling system.  The simplest backend would merely copy input
** from file descriptor RFFD to file descriptor SFFD.  Many devices
** require modification of their input in order to work properly.
** In many cases, they require the addition or deletion of control
** sequences for proper operation.  A familiar example is the line
** printer which generally cannot handle backspace characters.
** 
** In addition to filtering, backends can be used to generate banner
** pages and burst pages for easy separation and identification of
** print requests.
** 
** Backends for the wega printer spooler are expected to copy input
** from RFFD to SFFD while doing any filtering required. Other
** than copying input to output, there is only one other condition
** backends must handle.  If they receive a '-B' on the command
** line, they must not read RFFD.  The '-B' flag is generated by
** the dqueuer when it cannot find the file to be printed.  It
** is used by the dqueuer to cause system supplied backends to indicate
** 'file not found' on a banner page by itself.  A backend
** may handle flags and status that the dqueuer passes to it.
** 
** Backends may expect the following flags to be passed as arguments 
** when they are invoked.  They are used for banner page information
** by the system backends.
** 
** 	-B		File not found.
** 	-c x		Print file x number of times.
** 	-d dest		Destination string
** 	-f file		File name being printed.
** 	-F from		'from' is the user making the request.
** 	-s time		String with time that file was spooled
** 	-t title	Title requested
** 
** In addition to these flags, any extra options included in the 
** options field of a device line in the configuration file will
** be passed directory to the backend.  For instance, the text(M)
** backend recognizes '-T command' in the configuration file as
** and will pass the 'command' to stty.
** 
** The spooling system also allows the backend to return certain
** statuses so that xq(1) can monitor its progress.  This is done
** through the file on STATUSFD.  The contents of this file is the
** structure 'Dstat' whose definition is included in this file.
** the only fields that the backend may access are the 'Dpgsdone'
** (number of pages printed) and the 'Dpercentd' (percentage of file
** printed) fields.  Modification of the other fields may
** cause unpredictable results.  Use the OFFSET macro included in
** this file to access these fields.  An example of its use 
** follows:
** 
** 	int pages;
** 	struct Dstat dummy;
** 
** 	lseek(STATUSFD, OFFSET(dummy,Dpgsdone),0);
** 	write(STATUSFD, &pages,  sizeof(pages));
** 
** The fields Dpgsdone and Dpercentd are printed by xq(1).  They
** are originally set to -1 indicating to xq that the backend does
** not support these counters.  Thus, no problems will be caused 
** by not including this support.  Again, do not try to read or 
** write any other fields of the Dstat structure.  The spooler
** uses recording locking extensively, and even reading a field 
** may cause a deadlock situation.
** 
** Upon completion of processing, the backend exits.  If the exit
** returns a non-zero value, the spooler will assume an error has
** occured and try to recover.  If error logging is enabled it will
** write a message and the return the code into the error file.  It
** will then try to repeat the request.  If the error reoccures more
** than two times, the dqueuer will set the device status to DOWN.
** The Device may be reenabled by using the command
** 
** 	xq -q q:dev -Ud
** 
** where 'q:dev' is replaced with the que name and device number.  SEe
** xq(M) for more details.
**
****************************************************************/

/* special types */

#include <sys/types.h>
#include <signal.h>

/* spooler logs errors ... they are classified as: */
#define FATAL	0
#define WARNING	1
#define STATUS	2

#define FORML	 9	/* max length of form names	*/

/* Macro definition to find the offset (in bytes) of a certain element in a
** structure
*/
#define OFFSET(struct,item) (off_t)((char *)&(struct.item) - (char *)&struct)

/* interprocess communication sometimes uses double record locking
** the following structure is used in those cases
*/
typedef struct ippid {
			int	pide;	/* pid element */
			int	accesse;/* access element */
			} ippid;

/* entries in device status directory */
struct Dstat	{	
				int		Dstatus;
				int		Duid;
				char	Dform[FORML];
				time_t	last_dispatched;/* last time we were
										** dispatched
										*/
				int	retrys;		/* number of dispatch retrys */
				ippid Dpid;		/* pid of backend active on
								** this device
								*/
				int Dpgsdone;
				int	Dseqn;
				int	Dpercentd;
				};

/* redefinition of signals used between backends and the spooler programs */
#define SIGBACK		SIGTRAP
#define SIGSTOP		SIGIOT
#define SIGRES		SIGFPE

/* these defines identify which fds go with what during invocation of
** backends, logerr and other stuff
*/
#define LOGERRFD	0		/* fileds of logerr/error file */
#define SFFD		1		/* fileds of special file being used
							** NOTE: this constant should not be changed.
							** The text(M) backend exec's stty(1) and will
							** come up with megaproblems if fileds 1 is not
							** the special file
							*/
#define STATUSFD	2		/* fileds of status file for device */
#define	RFFD		3		/* fileds of request file to be printed */
